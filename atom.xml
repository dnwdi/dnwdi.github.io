<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[dnwdi]]></title>
  <subtitle><![CDATA[言胜于行]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.dnwdi.com//"/>
  <updated>2015-08-17T09:04:06.116Z</updated>
  <id>http://www.dnwdi.com//</id>
  
  <author>
    <name><![CDATA[dnwdi]]></name>
    <email><![CDATA[1369773384@qq.coom]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[git之分支操作]]></title>
    <link href="http://www.dnwdi.com/2015/08/17/git-branch/"/>
    <id>http://www.dnwdi.com/2015/08/17/git-branch/</id>
    <published>2015-08-17T09:03:10.000Z</published>
    <updated>2015-08-17T09:04:06.116Z</updated>
    <content type="html"><![CDATA[<p>在项目中有时候会遇到git关于分支的一些操作，现总结如下：</p>
<p><strong>查看分支：</strong><br>1 查看本地分支：</p>
<pre><code><span class="variable">$ </span>git branch
</code></pre><p>2 查看远程分支</p>
<pre><code>$ git <span class="keyword">branch </span>-r
</code></pre><p><strong>创建分支：</strong><br>1 创建本地分支（建立分支后，仍停留在当前分支，切换分支：git checkout branchName）</p>
<pre><code>$ git <span class="keyword">branch </span><span class="keyword">branchName</span>
</code></pre><p>2 创建分支后切换到新分支</p>
<pre><code>$ git checkout -<span class="tag">b</span> branchName
</code></pre><p><strong>提交分支：</strong><br>1 提交到远程分支</p>
<pre><code>$ git commit -a -m <span class="symbol">'my</span> <span class="keyword">new</span> branch'
</code></pre><p>git push origin branchName:branchName<br>2 如果想把本地的某个分支mybranch提交到远程仓库，并作为远程仓库的master分支</p>
<pre><code>$ git <span class="keyword">push </span>origin mybranch:master
</code></pre><a id="more"></a>    
<p><strong>删除分支：</strong><br>1 删除远程分支</p>
<pre><code><span class="variable">$ </span>git push origin <span class="symbol">:branchName</span>
</code></pre><p>2 删除本地分支，强制删除用-D</p>
<pre><code>$ git <span class="keyword">branch </span>-d <span class="keyword">branchName</span>
</code></pre><p><strong>合并分支：</strong><br>将分支branchName和当前所在分支合并</p>
<pre><code><span class="variable">$ </span>git merge branchName
</code></pre><p><strong>标记tag：</strong><br>对当前分支打tag：</p>
<pre><code>git <span class="keyword">tag</span> <span class="keyword">tag</span>Content
</code></pre><p>然后push到远程即可：</p>
<pre><code><span class="label">git</span> <span class="keyword">push </span>origin <span class="keyword">BranchName:BranchName</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>在项目中有时候会遇到git关于分支的一些操作，现总结如下：</p>
<p><strong>查看分支：</strong><br>1 查看本地分支：</p>
<pre><code><span class="variable">$ </span>git branch
</code></pre><p>2 查看远程分支</p>
<pre><code>$ git <span class="keyword">branch </span>-r
</code></pre><p><strong>创建分支：</strong><br>1 创建本地分支（建立分支后，仍停留在当前分支，切换分支：git checkout branchName）</p>
<pre><code>$ git <span class="keyword">branch </span><span class="keyword">branchName</span>
</code></pre><p>2 创建分支后切换到新分支</p>
<pre><code>$ git checkout -<span class="tag">b</span> branchName
</code></pre><p><strong>提交分支：</strong><br>1 提交到远程分支</p>
<pre><code>$ git commit -a -m <span class="symbol">'my</span> <span class="keyword">new</span> branch'
</code></pre><p>git push origin branchName:branchName<br>2 如果想把本地的某个分支mybranch提交到远程仓库，并作为远程仓库的master分支</p>
<pre><code>$ git <span class="keyword">push </span>origin mybranch:master
</code></pre>]]>
    
    </summary>
    
      <category term="branch" scheme="http://www.dnwdi.com/tags/branch/"/>
    
      <category term="git" scheme="http://www.dnwdi.com/tags/git/"/>
    
      <category term="git" scheme="http://www.dnwdi.com/categories/git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[sql之left join、right join、inner join的区别]]></title>
    <link href="http://www.dnwdi.com/2015/08/17/sql-join/"/>
    <id>http://www.dnwdi.com/2015/08/17/sql-join/</id>
    <published>2015-08-17T08:52:16.000Z</published>
    <updated>2015-08-17T08:54:42.757Z</updated>
    <content type="html"><![CDATA[<p><strong>left join(左联接) 返回包括左表中的所有记录和右表中联结字段相等的记录</strong> </p>
<p><strong>right join(右联接) 返回包括右表中的所有记录和左表中联结字段相等的记录</strong></p>
<p><strong>inner join(等值连接) 只返回两个表中联结字段相等的行</strong></p>
<p>举例如下： </p>
<p>表A记录如下：<br>aID　　　　　aNum<br>1　　　　　a20050111<br>2　　　　　a20050112<br>3　　　　　a20050113<br>4　　　　　a20050114<br>5　　　　　a20050115</p>
<p>表B记录如下:<br>bID　　　　　bName<br>1　　　　　2006032401<br>2　　　　　2006032402<br>3　　　　　2006032403<br>4　　　　　2006032404<br>8　　　　　2006032408</p>
<p>1.left join<br>sql语句如下: </p>
<pre><code><span class="keyword">select</span> * <span class="keyword">from</span> A
left <span class="keyword">join</span> B 
<span class="keyword">on</span> A.aID = B.bID
</code></pre><a id="more"></a>    
<p>结果如下:<br>aID　　　　　aNum　　　　　bID　　　　　bName<br>1　　　　　a20050111　　　　1　　　　　2006032401<br>2　　　　　a20050112　　　　2　　　　　2006032402<br>3　　　　　a20050113　　　　3　　　　　2006032403<br>4　　　　　a20050114　　　　4　　　　　2006032404<br>5　　　　　a20050115　　　　NULL　　　　　NULL</p>
<p>（所影响的行数为 5 行）<br>结果说明:<br>left join是以A表的记录为基础的,A可以看成左表,B可以看成右表,left join是以左表为准的.<br>换句话说,左表(A)的记录将会全部表示出来,而右表(B)只会显示符合搜索条件的记录(例子中为: A.aID = B.bID).<br>B表记录不足的地方均为NULL.</p>
<p>2.right join<br>sql语句如下: </p>
<pre><code>select * <span class="built_in">from</span> A
<span class="constant">right</span> join B 
<span class="command"><span class="keyword">on</span> <span class="title">A</span>.<span class="title">aID</span> = <span class="title">B</span>.<span class="title">bID</span></span>
</code></pre><p>结果如下:<br>aID　　　　　aNum　　　　　bID　　　　　bName<br>1　　　　　a20050111　　　　1　　　　　2006032401<br>2　　　　　a20050112　　　　2　　　　　2006032402<br>3　　　　　a20050113　　　　3　　　　　2006032403<br>4　　　　　a20050114　　　　4　　　　　2006032404<br>NULL　　　　　NULL　　　　　8　　　　　2006032408</p>
<p>（所影响的行数为 5 行）<br>结果说明:<br>仔细观察一下,就会发现,和left join的结果刚好相反,这次是以右表(B)为基础的,A表不足的地方用NULL填充.</p>
<p>3.inner join<br>sql语句如下: </p>
<pre><code>select * <span class="keyword">from</span> A
innerjoin B 
<span class="function_start"><span class="keyword">on</span></span> A.aID = B.bID
</code></pre><p>结果如下:<br>aID　　　　　aNum　　　　　bID　　　　　bName<br>1　　　　　a20050111　　　　1　　　　　2006032401<br>2　　　　　a20050112　　　　2　　　　　2006032402<br>3　　　　　a20050113　　　　3　　　　　2006032403<br>4　　　　　a20050114　　　　4　　　　　2006032404</p>
<p>结果说明:<br>很明显,这里只显示出了 A.aID = B.bID的记录.这说明inner join并不以谁为基础,它只显示符合条件的记录.</p>
<p>注:<br>LEFT JOIN操作用于在任何的 FROM 子句中，组合来源表的记录。使用 LEFT JOIN 运算来创建一个左边外部联接。左边外部联接将包含了从第一个（左边）开始的两个表中的全部记录，即使在第二个（右边）表中并没有相符值的记录。</p>
<p>语法：FROM table1 LEFT JOIN table2 ON table1.field1 compopr table2.field2</p>
<p>说明：table1, table2参数用于指定要将记录组合的表的名称。<br>field1, field2参数指定被联接的字段的名称。且这些字段必须有相同的数据类型及包含相同类型的数据，但它们不需要有相同的名称。<br>compopr参数指定关系比较运算符：”=”， “&lt;”， “&gt;”， “&lt;=”， “&gt;=” 或 “&lt;&gt;”。<br>如果在INNER JOIN操作中要联接包含Memo 数据类型或 OLE Object 数据类型数据的字段，将会发生错误. </p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>left join(左联接) 返回包括左表中的所有记录和右表中联结字段相等的记录</strong> </p>
<p><strong>right join(右联接) 返回包括右表中的所有记录和左表中联结字段相等的记录</strong></p>
<p><strong>inner join(等值连接) 只返回两个表中联结字段相等的行</strong></p>
<p>举例如下： </p>
<p>表A记录如下：<br>aID　　　　　aNum<br>1　　　　　a20050111<br>2　　　　　a20050112<br>3　　　　　a20050113<br>4　　　　　a20050114<br>5　　　　　a20050115</p>
<p>表B记录如下:<br>bID　　　　　bName<br>1　　　　　2006032401<br>2　　　　　2006032402<br>3　　　　　2006032403<br>4　　　　　2006032404<br>8　　　　　2006032408</p>
<p>1.left join<br>sql语句如下: </p>
<pre><code><span class="keyword">select</span> * <span class="keyword">from</span> A
left <span class="keyword">join</span> B 
<span class="keyword">on</span> A.aID = B.bID
</code></pre>]]>
    
    </summary>
    
      <category term="mysql" scheme="http://www.dnwdi.com/tags/mysql/"/>
    
      <category term="mysql" scheme="http://www.dnwdi.com/categories/mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MySQL索引创建 删除 增加 修改命令]]></title>
    <link href="http://www.dnwdi.com/2015/08/11/mysql-index/"/>
    <id>http://www.dnwdi.com/2015/08/11/mysql-index/</id>
    <published>2015-08-11T10:37:36.000Z</published>
    <updated>2015-08-17T08:55:47.982Z</updated>
    <content type="html"><![CDATA[<p>在mysql中索引是我们对数据库进行优化的一个很好的功能，下面我来给大家介绍mysql 索引的创建 删除 增加 修改方法，希望些教程对各位朋友有所帮助。</p>
<p><strong>CREATE命令创建唯一索引：</strong><br>可以创建一个唯一索引的表。唯一的索引意味着两个行不能拥有相同的索引值。这里是语法来创建索引的表</p>
<pre><code><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> index_name
<span class="keyword">ON</span> table_name ( column1, column2,...);</span>
</code></pre><p>可以使用一个或多个列上创建索引。例如，我们可以创建一个索引的使用在表tutorials_tbl的tutorial_author列上</p>
<pre><code><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> AUTHOR_INDEX
<span class="keyword">ON</span> tutorials_tbl (tutorial_author)</span>
</code></pre><p><strong>CREATE命令创建简单索引</strong><br>可以创建一个简单的索引的表。只要省略UNIQUE关键字的查询创建一个简单的索引。简单的索引允许重复表中的值。<br>如果你想在一列以降序索引值，可以在列名后添加保留字DESC：</p>
<pre><code>mysql&gt; <span class="keyword">CREATE</span> <span class="keyword">INDEX</span> AUTHOR_INDEX
<span class="keyword">ON</span> tutorials_tbl (tutorial_author <span class="keyword">DESC</span>)
</code></pre><a id="more"></a>
<p><strong>ALTER命令添加和删除索引：</strong><br>有四种类型的语句表添加索引：</p>
<pre><code><span class="operator"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">ADD</span> PRIMARY <span class="keyword">KEY</span> (column_list)</span>
</code></pre><p>这条语句添加一个主键，这意味着索引值必须是唯一的，不能是NULL。</p>
<pre><code><span class="operator"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> index_name (column_list)</span>
</code></pre><p>这条语句创建一个索引，其值必须是唯一的（除NULL值，这可能会多次出现）。</p>
<pre><code><span class="operator"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">ADD</span> <span class="keyword">INDEX</span> index_name (column_list)</span>
</code></pre><p>这增加了一个普通的索引，其中的任何值，可能会出现多于一次。</p>
<pre><code><span class="operator"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">ADD</span> FULLTEXT index_name (column_list)</span>
</code></pre><p>这将创建一个特殊的FULLTEXT索引，用于文本搜索的目的。</p>
<p>下面是这个例子，在现有的表添加索引。</p>
<pre><code>mysql&gt; ALTER TABLE testalter_tbl ADD INDEX <span class="list">(<span class="keyword">c</span>)</span><span class="comment">;</span>
</code></pre><p>可以删除任何INDEX通过使用DROP子句和使用ALTER命令。试试下面的例子上面创建的索引下降。</p>
<pre><code>mysql&gt; ALTER TABLE testalter_tbl DROP INDEX <span class="list">(<span class="keyword">c</span>)</span><span class="comment">;</span>
</code></pre><p>可以使用ALTER命令删除主键如下：</p>
<pre><code>mysql&gt; ALTER TABLE testalter_tbl DROP PRIMARY <span class="keyword">KEY</span><span class="comment">;</span>
</code></pre><p>显示索引信息：<br>您可以使用SHOW INDEX命令，列出所有相关联的索引表。垂直格式输出（指定由 G）往往是有用的这句话，以避免长时间行重叠：</p>
<pre><code>mysql&gt; SHOW <span class="keyword">INDEX</span> <span class="keyword">FROM</span> table_nameG
</code></pre><p><strong>ALTER命令加索引</strong><br>mysql&gt; alter table 表名 add index 索引名 (字段名1[，字段名2 …]);</p>
<pre><code>mysql&gt; alter table employee add <span class="built_in">index</span> emp_name (<span class="keyword">name</span>);
</code></pre><p>加主关键字的索引<br>mysql&gt; alter table 表名 add primary key (字段名);</p>
<pre><code>mysql&gt; alter table employee add primary key<span class="list">(<span class="keyword">id</span>)</span><span class="comment">;</span>
</code></pre><p>加唯一限制条件的索引<br>mysql&gt; alter table 表名 add unique 索引名 (字段名);</p>
<pre><code>mysql&gt; alter table employee add unique emp_name2<span class="list">(<span class="keyword">cardnumber</span>)</span><span class="comment">;</span>
</code></pre><p>查看某个表的索引<br>mysql&gt; show index from 表名;</p>
<pre><code>mysql&gt; show <span class="keyword">index</span> <span class="keyword">from</span> employee;
</code></pre><p>删除某个索引<br>mysql&gt; alter table 表名 drop index 索引名;</p>
<pre><code>mysql&gt;alter <span class="keyword">table</span> employee <span class="keyword">drop</span> index emp_name;
</code></pre><p>总结索引与优化<br>1、选择索引的数据类型<br>MySQL支持很多数据类型，选择合适的数据类型存储数据对性能有很大的影响。通常来说，可以遵循以下一些指导原则：<br>(1)越小的数据类型通常更好：越小的数据类型通常在磁盘、内存和CPU缓存中都需要更少的空间，处理起来更快。<br>(2)简单的数据类型更好：整型数据比起字符，处理开销更小，因为字符串的比较更复杂。在MySQL中，应该用内置的日期和时间数据类型，而不是用字符串来存储时间；以及用整型数据类型存储IP地址。<br>(3)尽量避免NULL：应该指定列为NOT NULL，除非你想存储NULL。在MySQL中，含有空值的列很难进行查询优化，因为它们使得索引、索引的统计信息以及比较运算更加复杂。你应该用0、一个特殊的值或者一个空串代替空值。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在mysql中索引是我们对数据库进行优化的一个很好的功能，下面我来给大家介绍mysql 索引的创建 删除 增加 修改方法，希望些教程对各位朋友有所帮助。</p>
<p><strong>CREATE命令创建唯一索引：</strong><br>可以创建一个唯一索引的表。唯一的索引意味着两个行不能拥有相同的索引值。这里是语法来创建索引的表</p>
<pre><code><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> index_name
<span class="keyword">ON</span> table_name ( column1, column2,...);</span>
</code></pre><p>可以使用一个或多个列上创建索引。例如，我们可以创建一个索引的使用在表tutorials_tbl的tutorial_author列上</p>
<pre><code><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> AUTHOR_INDEX
<span class="keyword">ON</span> tutorials_tbl (tutorial_author)</span>
</code></pre><p><strong>CREATE命令创建简单索引</strong><br>可以创建一个简单的索引的表。只要省略UNIQUE关键字的查询创建一个简单的索引。简单的索引允许重复表中的值。<br>如果你想在一列以降序索引值，可以在列名后添加保留字DESC：</p>
<pre><code>mysql&gt; <span class="keyword">CREATE</span> <span class="keyword">INDEX</span> AUTHOR_INDEX
<span class="keyword">ON</span> tutorials_tbl (tutorial_author <span class="keyword">DESC</span>)
</code></pre>]]>
    
    </summary>
    
      <category term="index" scheme="http://www.dnwdi.com/tags/index/"/>
    
      <category term="mysql" scheme="http://www.dnwdi.com/tags/mysql/"/>
    
      <category term="mysql" scheme="http://www.dnwdi.com/categories/mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[批量删除Redis的key]]></title>
    <link href="http://www.dnwdi.com/2015/08/11/redis-batch-del/"/>
    <id>http://www.dnwdi.com/2015/08/11/redis-batch-del/</id>
    <published>2015-08-11T06:06:05.000Z</published>
    <updated>2015-08-11T06:07:09.720Z</updated>
    <content type="html"><![CDATA[<pre><code>redis-<span class="keyword">cli</span> KEYS <span class="string">"yourkeys_*"</span> | xargs redis-<span class="keyword">cli</span> DEL
</code></pre><hr>
<p>Redis并没有提供批量删除记录的方法，这有时候很不方便，特别是重新初始化数据的时候。一般有两种做法：<br>如果业务场景明确，可以通过DBID进行区分，Redis默认的DBID是0，默认的配置文件是有16个DB，可以在应用中通过select方法指定数据库的ID进行存取。然后通过FlushDB命令能清空某个ID的数据库，达到重新初始化的目的。<br>如果某个ID的数据库已经有很多类型的记录了，无法整个库清空，那么就需要批量的删除key值，这时<strong>可以采用Linux管道</strong>，比如我要删除DBID为1的test开头的key值：</p>
<pre><code>[root@banping redis]# /banping/redis/src/redis-<span class="keyword">cli</span> -<span class="keyword">n</span> 1 keys “<span class="keyword">test</span>*” | xargs /banping/redis/src/redis-<span class="keyword">cli</span> -<span class="keyword">n</span> 1 del
(integer) 5095
</code></pre><p>把keys的输出作为del的输入，这样就批量删除了。<br>附redis-cli 命令：<br>redis-cli 2.4.2</p>
<pre><code>Usage: redis-cli [OPTIONS] [cmd [arg [arg ...]]]
-h Server hostname (default: 127.0.<span class="operator">0.<span class="number">1</span>)
-<span class="keyword">p</span> <span class="keyword">Server</span> port (<span class="keyword">default</span>: <span class="number">6379</span>)
-s <span class="keyword">Server</span> socket (overrides hostname <span class="keyword">and</span> port)
-a <span class="keyword">Password</span> <span class="keyword">to</span> <span class="keyword">use</span> <span class="keyword">when</span> connecting <span class="keyword">to</span> the <span class="keyword">server</span>
-r <span class="keyword">Execute</span> specified command <span class="keyword">N</span> times
-<span class="keyword">i</span> <span class="keyword">When</span> -r <span class="keyword">is</span> used, waits seconds per command.
It <span class="keyword">is</span> possible <span class="keyword">to</span> specify sub-<span class="keyword">second</span> times <span class="keyword">like</span> -<span class="keyword">i</span> <span class="number">0.1</span>.
-<span class="keyword">n</span> <span class="keyword">Database</span> <span class="built_in">number</span>
-x <span class="keyword">Read</span> <span class="keyword">last</span> argument <span class="keyword">from</span> STDIN
-<span class="keyword">d</span> Multi-<span class="keyword">bulk</span> delimiter <span class="keyword">in</span> <span class="keyword">for</span> <span class="keyword">raw</span> formatting (<span class="keyword">default</span>: \<span class="keyword">n</span>)
–<span class="keyword">raw</span> <span class="keyword">Use</span> <span class="keyword">raw</span> formatting <span class="keyword">for</span> replies (<span class="keyword">default</span> <span class="keyword">when</span> STDOUT <span class="keyword">is</span> <span class="keyword">not</span> a tty)
–latency Enter a special <span class="keyword">mode</span> continuously sampling latency.
–<span class="keyword">help</span> <span class="keyword">Output</span> this <span class="keyword">help</span> <span class="keyword">and</span> <span class="keyword">exit</span>
–<span class="keyword">version</span> <span class="keyword">Output</span> <span class="keyword">version</span> <span class="keyword">and</span> <span class="keyword">exit</span></span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<pre><code>redis-<span class="keyword">cli</span> KEYS <span class="string">"yourkeys_*"</span> | xargs redis-<span class="keyword">cli</spa]]>
    </summary>
    
      <category term="redis" scheme="http://www.dnwdi.com/tags/redis/"/>
    
      <category term="redis" scheme="http://www.dnwdi.com/categories/redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[redis_error:Operation against a key holding the wrong kind of value]]></title>
    <link href="http://www.dnwdi.com/2015/08/11/redis-error/"/>
    <id>http://www.dnwdi.com/2015/08/11/redis-error/</id>
    <published>2015-08-11T03:48:22.000Z</published>
    <updated>2015-08-11T06:08:33.858Z</updated>
    <content type="html"><![CDATA[<p>首先应该明白报这个错误说明了你用的<strong>jedis方法与redis服务器中存储数据的类型存在冲突</strong>。</p>
<p>例如：数据库中有一个key是usrInfo的数据存储的是Hash类型的，但是你使用jedis执行数据</p>
<p>操作的时候却使用了非Hash的操作方法，比如Sorted Sets里的方法。此时就会报</p>
<p><code>ERR Operation against a key holding the wrong kind of value</code></p>
<p>问题解决：</p>
<p>先执行一条如下命令，usrInfo为其中的一个key值。</p>
<pre><code>redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;type usrInfo
</code></pre><p>此时会显示出该key存储在现在redis服务器中的类型，例如：</p>
<pre><code>redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;hash
</code></pre><p>则表示key为usrInfo的数据是以hash类型存储在redis服务器里的，此时操作这个数据就必须使用hset、hget等操作方法。</p>
<p>如果是zset如下：</p>
<pre><code>redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;zset
</code></pre><p>则表示数据类型为Sorted Sets的。此时就需要使用zadd、zrange等操作方法，否则就会报ERR Operation against a key holding the wrong kind of value这个错误！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>首先应该明白报这个错误说明了你用的<strong>jedis方法与redis服务器中存储数据的类型存在冲突</strong>。</p>
<p>例如：数据库中有一个key是usrInfo的数据存储的是Hash类型的，但是你使用jedis执行数据</p>
<p>操作的时候却使用]]>
    </summary>
    
      <category term="redis" scheme="http://www.dnwdi.com/tags/redis/"/>
    
      <category term="redis" scheme="http://www.dnwdi.com/categories/redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Windows下搭建Github Blog]]></title>
    <link href="http://www.dnwdi.com/2015/08/07/blog-with-hexo/"/>
    <id>http://www.dnwdi.com/2015/08/07/blog-with-hexo/</id>
    <published>2015-08-07T06:15:41.000Z</published>
    <updated>2015-08-07T07:12:43.263Z</updated>
    <content type="html"><![CDATA[<p>第一次在github上搭建自己的博客，花了将近一天的时间，终于能出了一个像样的页面，现在将我搭建的过程记录一下，省的再走弯路。</p>
<p>一开始在网上搜教程，有好多讲用jekyll的，也让我记住了阮一峰这个人！这个是他写的教程：<a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html" target="_blank" rel="external">搭建一个免费的，无限流量的Blog—-github Pages和Jekyll入门</a> 。在跑他这个例子的时候，我就花了好多时间==！主要的坑如下：</p>
<ol>
<li><p>使用UTF-8无BOM格式编码。由于我用的notepad++编辑器，默认编码是ANSI，所以会出现乱码情况</p>
</li>
<li><p>注意gh_pages分支和master分支的区别。在user pages如repo是dnwdi.github.io下的博客用master分支；<br>在project pages如repo是dnwdi.github.ioblog下的博客用gh_pages分支 </p>
</li>
</ol>
<p>最要命的一点是，当配置文件或者Liquid模板语言不小心写错了，git push上去之后，git会发一封build failed的邮件，但完全没有说明具体的出错地方，所以查错非常困难！这点无法容忍，所以最后虽然页面出来了，但不是想要的结果，有些liquid语言没有正确解析，也懒得调试了，直接放弃了</p>
<p>之后看到用Hexo搭建的教程，创建简单，可以本地调试，可以看到具体的出错地方，这点我觉得是最大的优点，有问题不要紧，至少要知道在哪改嘛！</p>
<p>参照的博客如下，写的都非常详尽！</p>
<ul>
<li><a href="http://www.isetsuna.com/categories/Hexo/" target="_blank" rel="external">Hexo博客系列</a></li>
<li><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external">hexo你的博客</a></li>
<li><a href="http://segmentfault.com/a/1190000002592993" target="_blank" rel="external">Hexo 3.0 静态博客使用指南</a></li>
<li><a href="http://baoxiehao.com/2014/05/17/Hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/" target="_blank" rel="external">Hexo博客优化</a></li>
</ul>
<p>由于hexo页面使用markdown语法，故附上我使用的markdown编辑器：</p>
<p><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">Cmd Markdown编辑器</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>第一次在github上搭建自己的博客，花了将近一天的时间，终于能出了一个像样的页面，现在将我搭建的过程记录一下，省的再走弯路。</p>
<p>一开始在网上搜教程，有好多讲用jekyll的，也让我记住了阮一峰这个人！这个是他写的教程：<a href="http://www.r]]>
    </summary>
    
      <category term="hexo" scheme="http://www.dnwdi.com/tags/hexo/"/>
    
      <category term="hexo" scheme="http://www.dnwdi.com/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[这是一篇测试文章]]></title>
    <link href="http://www.dnwdi.com/2015/08/06/test/"/>
    <id>http://www.dnwdi.com/2015/08/06/test/</id>
    <published>2015-08-06T03:53:15.000Z</published>
    <updated>2015-08-06T03:59:05.702Z</updated>
    <content type="html"><![CDATA[<h1 id="我的博客正式开通啦！">我的博客正式开通啦！</h1><p><img src="http://7xkx7i.com1.z0.glb.clouddn.com/222211817.jpg" alt="此处输入图片的描述"></p>
<pre><code>public <span class="value">static</span> void <span class="function">main</span>(String<span class="attr_selector">[]</span> args){
    <span class="function">while</span>(<span class="function">isAlive</span>()){
        <span class="function">doStudy</span>();
    }
}
</code></pre><p><a href="http://dnwdi.github.io" target="_blank" rel="external">我的博客地址</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="我的博客正式开通啦！">我的博客正式开通啦！</h1><p><img src="http://7xkx7i.com1.z0.glb.clouddn.com/222211817.jpg" alt="此处输入图片的描述"></p>
<pre><code>public ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://www.dnwdi.com/2015/08/06/hello-world/"/>
    <id>http://www.dnwdi.com/2015/08/06/hello-world/</id>
    <published>2015-08-06T02:15:40.241Z</published>
    <updated>2015-08-06T02:15:40.241Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>