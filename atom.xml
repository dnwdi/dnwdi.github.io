<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[dnwdi]]></title>
  <subtitle><![CDATA[言胜于行]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.dnwdi.com//"/>
  <updated>2015-08-24T01:36:04.922Z</updated>
  <id>http://www.dnwdi.com//</id>
  
  <author>
    <name><![CDATA[dnwdi]]></name>
    <email><![CDATA[1369773384@qq.coom]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Redis之发布与订阅]]></title>
    <link href="http://www.dnwdi.com/2015/08/24/redis-pub-sub/"/>
    <id>http://www.dnwdi.com/2015/08/24/redis-pub-sub/</id>
    <published>2015-08-24T01:35:12.000Z</published>
    <updated>2015-08-24T01:36:04.922Z</updated>
    <content type="html"><![CDATA[<ol>
<li>Redis服务端的安装不再赘述，主要写下客户端的安装测试。<br>创建Maven项目，导入jedis代码如下:<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="title">type</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="title">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>下面是个hello,world程序:</p>
<pre><code><span class="keyword">package</span> demo;
<span class="keyword">import</span> org.jredis.*;
<span class="keyword">import</span> org.jredis.ri.alphazero.JRedisClient;
<span class="keyword">public</span> class App {
<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) {
    <span class="keyword">try</span> {
             JRedis  jr = <span class="keyword">new</span> JRedisClient(<span class="string">"*.*.*.*"</span>,<span class="number">6379</span>); <span class="comment">//redis服务地址和端口号</span>
             <span class="keyword">String</span> <span class="variable">key</span> = <span class="string">"mKey"</span>;
             jr.<span class="built_in">set</span>(<span class="variable">key</span>, <span class="string">"hello,redis!"</span>);
             <span class="keyword">String</span> v = <span class="keyword">new</span> <span class="keyword">String</span>(jr.<span class="built_in">get</span>(<span class="variable">key</span>));
             <span class="keyword">String</span> k2 = <span class="string">"count"</span>;
             jr.incr(k2);
             jr.incr(k2);
             System.out.<span class="built_in">println</span>(v);
             System.out.<span class="built_in">println</span>(<span class="keyword">new</span> <span class="keyword">String</span>(jr.<span class="built_in">get</span>(k2)));
        } <span class="keyword">catch</span> (Exception e) {

        }
    }
} 
</code></pre><p>运行测试客户端，如果能够看到正确的输出，那么redis环境已经搭建好了。<br><a id="more"></a></p>
<ol>
<li>Jedis的Publish/Subscribe功能的使用<br>由于redis内置了发布/订阅功能，可以作为消息机制使用。所以这里主要使用Jedis的Publish/Subscribe功能。</li>
</ol>
<p>(1). 添加Spring核心包，主要使用其最核心的IoC功能。如果使用Maven，配置如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">version</span>&gt;</span>3.1.1.RELEASE<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="title">type</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="title">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">version</span>&gt;</span>3.1.1.RELEASE<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="title">type</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="title">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">version</span>&gt;</span>3.1.1.RELEASE<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="title">type</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="title">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">version</span>&gt;</span>3.1.1.RELEASE<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="title">type</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="title">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>(2).使用Spring来配置Jedis连接池和RedisUtil的注入，写在bean-config.xml中。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pool配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"jedisPoolConfig"</span> <span class="attribute">class</span>=<span class="value">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"maxActive"</span> <span class="attribute">value</span>=<span class="value">"20"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"maxIdle"</span> <span class="attribute">value</span>=<span class="value">"10"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"maxWait"</span> <span class="attribute">value</span>=<span class="value">"1000"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"testOnBorrow"</span> <span class="attribute">value</span>=<span class="value">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- jedis pool配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"jedisPool"</span> <span class="attribute">class</span>=<span class="value">"redis.clients.jedis.JedisPool"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">constructor-arg</span> <span class="attribute">index</span>=<span class="value">"0"</span> <span class="attribute">ref</span>=<span class="value">"jedisPoolConfig"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">constructor-arg</span> <span class="attribute">index</span>=<span class="value">"1"</span> <span class="attribute">value</span>=<span class="value">"10.8.9.237"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">constructor-arg</span> <span class="attribute">index</span>=<span class="value">"2"</span> <span class="attribute">value</span>=<span class="value">"6379"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 包装类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"redisUtil"</span> <span class="attribute">class</span>=<span class="value">"demo.RedisUtil"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"jedisPool"</span> <span class="attribute">ref</span>=<span class="value">"jedisPool"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>(3).编写RedisUtil,这里只是简单的包装，不做解释。</p>
<pre><code>package demo;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;


/<span class="keyword">*</span><span class="keyword">*</span>  
 <span class="keyword">*</span> 连接和使用redis资源的工具类    
 <span class="keyword">*</span> <span class="comment">@author watson   </span>
 <span class="keyword">*</span> <span class="comment">@version 0.5   </span>
 <span class="keyword">*</span>/ 
public class RedisUtil {

    /<span class="keyword">*</span><span class="keyword">*</span>       
     <span class="keyword">*</span> 数据源      
     <span class="keyword">*</span>/     
    private JedisPool jedisPool;

    /<span class="keyword">*</span><span class="keyword">*</span>      
     <span class="keyword">*</span> 获取数据库连接       
     <span class="keyword">*</span> <span class="comment">@return conn       </span>
     <span class="keyword">*</span>/     
    public Jedis getConnection() {
        Jedis jedis=null;          
        try {              
            jedis=jedisPool.getResource();          
        } catch (Exception e) {              
            e.printStackTrace();          
        }          
        return jedis;      
    }   

    /<span class="keyword">*</span><span class="keyword">*</span>       
     <span class="keyword">*</span> 关闭数据库连接       
     <span class="keyword">*</span> <span class="comment">@param conn       </span>
     <span class="keyword">*</span>/     
    public void closeConnection(Jedis jedis) {          
        if (null != jedis) {              
            try {                  
                jedisPool.returnResource(jedis);              
            } catch (Exception e) {
                    e.printStackTrace();              
            }          
        }      
    }  

    /<span class="keyword">*</span><span class="keyword">*</span>       
     <span class="keyword">*</span> 设置连接池       
     <span class="keyword">*</span> <span class="comment">@param 数据源      </span>
     <span class="keyword">*</span>/     
    public void setJedisPool(JedisPool JedisPool) {
        this.jedisPool = JedisPool;      
    }       

    /<span class="keyword">*</span><span class="keyword">*</span>       
     <span class="keyword">*</span> 获取连接池       
     <span class="keyword">*</span> <span class="comment">@return 数据源       </span>
     <span class="keyword">*</span>/     
    public JedisPool getJedisPool() {
        return jedisPool;      
    }     
} 
</code></pre><p>(4).编写Listener。要使用Jedis的Publish/Subscribe功能，必须编写对JedisPubSub的自己的实现，其中的函数的功能如下:</p>
<pre><code><span class="keyword">package</span> demo;

<span class="keyword">import</span> redis.clients.jedis.JedisPubSub;

<span class="keyword">public</span> class MyListener extends JedisPubSub {
    <span class="comment">// 取得订阅的消息后的处理</span>
    <span class="keyword">public</span> <span class="keyword">void</span> onMessage(<span class="keyword">String</span> channel, <span class="keyword">String</span> message) {
        System.out.<span class="built_in">println</span>(channel + <span class="string">"="</span> + message);
    }

    <span class="comment">// 初始化订阅时候的处理</span>
    <span class="keyword">public</span> <span class="keyword">void</span> onSubscribe(<span class="keyword">String</span> channel, <span class="built_in">int</span> subscribedChannels) {
        <span class="comment">// System.out.println(channel + "=" + subscribedChannels);</span>
    }

    <span class="comment">// 取消订阅时候的处理</span>
    <span class="keyword">public</span> <span class="keyword">void</span> onUnsubscribe(<span class="keyword">String</span> channel, <span class="built_in">int</span> subscribedChannels) {
        <span class="comment">// System.out.println(channel + "=" + subscribedChannels);</span>
    }

    <span class="comment">// 初始化按表达式的方式订阅时候的处理</span>
    <span class="keyword">public</span> <span class="keyword">void</span> onPSubscribe(<span class="keyword">String</span> pattern, <span class="built_in">int</span> subscribedChannels) {
        <span class="comment">// System.out.println(pattern + "=" + subscribedChannels);</span>
    }

    <span class="comment">// 取消按表达式的方式订阅时候的处理</span>
    <span class="keyword">public</span> <span class="keyword">void</span> onPUnsubscribe(<span class="keyword">String</span> pattern, <span class="built_in">int</span> subscribedChannels) {
        <span class="comment">// System.out.println(pattern + "=" + subscribedChannels);</span>
    }

    <span class="comment">// 取得按表达式的方式订阅的消息后的处理</span>
    <span class="keyword">public</span> <span class="keyword">void</span> onPMessage(<span class="keyword">String</span> pattern, <span class="keyword">String</span> channel, <span class="keyword">String</span> message) {
        System.out.<span class="built_in">println</span>(pattern + <span class="string">"="</span> + channel + <span class="string">"="</span> + message);
    }
}
</code></pre><p>(5).实现订阅动能<br>Jedis有两种订阅模式：subsribe(一般模式设置频道)和psubsribe(使用模式匹配来设置频道)。不管是那种模式都可以设置个数不定的频道。订阅得到信息在将会lister的onMessage(…)方法或者onPMessage(…)中进行进行处理，这里我们只是做了简单的输出。</p>
<pre><code>ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans-config.xml"</span>);
RedisUtil ru = (RedisUtil) ac.getBean(<span class="string">"redisUtil"</span>);    
<span class="keyword">final</span> Jedis jedis = ru.getConnection();
<span class="keyword">final</span> MyListener listener = <span class="keyword">new</span> MyListener();
<span class="comment">//可以订阅多个频道</span>
<span class="comment">//订阅得到信息在lister的onMessage(...)方法中进行处理</span>
<span class="comment">//jedis.subscribe(listener, "foo", "watson");</span>

<span class="comment">//也用数组的方式设置多个频道</span>
<span class="comment">//jedis.subscribe(listener, new String[]{"hello_foo","hello_test"});</span>

<span class="comment">//这里启动了订阅监听，线程将在这里被阻塞</span>
<span class="comment">//订阅得到信息在lister的onPMessage(...)方法中进行处理</span>
jedis.psubscribe(listener, <span class="keyword">new</span> <span class="built_in">String</span>[]{<span class="string">"hello_*"</span>});<span class="comment">//使用模式匹配的方式设置频道</span>
</code></pre><p>(6).实现发布端代码。发布消息只用调用Jedis的publish(…)方法即可。</p>
<pre><code>ApplicationContext ac = new ClassPathXmlApplicationContext<span class="params">(<span class="string">"beans-config.xml"</span>)</span>;
RedisUtil ru = <span class="params">(RedisUtil)</span> ac.getBean<span class="params">(<span class="string">"redisUtil"</span>)</span>;    
Jedis jedis = ru.getConnection<span class="params">()</span>;
jedis.publish<span class="params">(<span class="string">"hello_foo"</span>, <span class="string">"bar123"</span>)</span>;
jedis.publish<span class="params">(<span class="string">"hello_test"</span>, <span class="string">"hello watson"</span>)</span>;
</code></pre><p>(7).分别运行上面的第5步的订阅端代码和第6步的发布端的代码，订阅端就可以得到发布端发布的结果。控制台输出结果如下：</p>
<pre><code>hello_<span class="keyword">*</span>=hello_foo=bar123
hello_<span class="keyword">*</span>=hello_test=hello watson
</code></pre><p>redis的安装参考：<br>官方：<a href="http://redis.io/topics/quickstart" target="_blank" rel="external">http://redis.io/topics/quickstart</a><br>中文：<a href="http://www.cnblogs.com/redcreen/archive/2011/02/15/1955523.html" target="_blank" rel="external">http://www.cnblogs.com/redcreen/archive/2011/02/15/1955523.html</a><br>参考：<br>Jedis的高级使用：<a href="https://github.com/xetorthio/jedis/wiki/AdvancedUsage" target="_blank" rel="external">https://github.com/xetorthio/jedis/wiki/AdvancedUsage</a><br>netty里集成spring注入jedis：<a href="http://yifangyou.blog.51cto.com/900206/628163" target="_blank" rel="external">http://yifangyou.blog.51cto.com/900206/628163</a><br>Redis的Publish/Subscribe命令的使用：<a href="http://redis.io/topics/pubsub" target="_blank" rel="external">http://redis.io/topics/pubsub</a><br>Redis的使用：<a href="http://redis.io/" target="_blank" rel="external">http://redis.io/</a><br>Redis中文文档：<a href="http://redisdoc.com/" target="_blank" rel="external">http://redisdoc.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li>Redis服务端的安装不再赘述，主要写下客户端的安装测试。<br>创建Maven项目，导入jedis代码如下:<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="title">type</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="title">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>下面是个hello,world程序:</p>
<pre><code><span class="keyword">package</span> demo;
<span class="keyword">import</span> org.jredis.*;
<span class="keyword">import</span> org.jredis.ri.alphazero.JRedisClient;
<span class="keyword">public</span> class App {
<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) {
    <span class="keyword">try</span> {
             JRedis  jr = <span class="keyword">new</span> JRedisClient(<span class="string">"*.*.*.*"</span>,<span class="number">6379</span>); <span class="comment">//redis服务地址和端口号</span>
             <span class="keyword">String</span> <span class="variable">key</span> = <span class="string">"mKey"</span>;
             jr.<span class="built_in">set</span>(<span class="variable">key</span>, <span class="string">"hello,redis!"</span>);
             <span class="keyword">String</span> v = <span class="keyword">new</span> <span class="keyword">String</span>(jr.<span class="built_in">get</span>(<span class="variable">key</span>));
             <span class="keyword">String</span> k2 = <span class="string">"count"</span>;
             jr.incr(k2);
             jr.incr(k2);
             System.out.<span class="built_in">println</span>(v);
             System.out.<span class="built_in">println</span>(<span class="keyword">new</span> <span class="keyword">String</span>(jr.<span class="built_in">get</span>(k2)));
        } <span class="keyword">catch</span> (Exception e) {

        }
    }
} 
</code></pre><p>运行测试客户端，如果能够看到正确的输出，那么redis环境已经搭建好了。<br>]]>
    
    </summary>
    
      <category term="pub" scheme="http://www.dnwdi.com/tags/pub/"/>
    
      <category term="redis" scheme="http://www.dnwdi.com/tags/redis/"/>
    
      <category term="sub" scheme="http://www.dnwdi.com/tags/sub/"/>
    
      <category term="redis" scheme="http://www.dnwdi.com/categories/redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python之yield]]></title>
    <link href="http://www.dnwdi.com/2015/08/19/python-yield/"/>
    <id>http://www.dnwdi.com/2015/08/19/python-yield/</id>
    <published>2015-08-19T13:08:28.000Z</published>
    <updated>2015-08-24T01:44:20.051Z</updated>
    <content type="html"><![CDATA[<p>yield的英文单词意思是生产，刚接触Python的时候感到非常困惑，一直没弄明白yield的用法。<br>只知道利用yield产生数据的函数叫<strong>生成器</strong>，用yield接收数据的函数叫<strong>协程</strong>。。。<br>比如下面的例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addlist</span><span class="params">(alist)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> alist:</span><br><span class="line">        <span class="keyword">yield</span> i + <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p>取出alist的每一项，然后把i + 1塞进去。然后通过调用取出每一项：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alist = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="function"><span class="keyword">for</span> x in <span class="title">addlist</span><span class="params">(alist)</span>:</span><br><span class="line">    print x,</span></span><br></pre></td></tr></table></figure></p>
<ol>
<li>包含yield的函数<br>假如你看到某个函数包含了yield，这意味着这个函数已经是一个Generator，它的执行会和其他普通的函数有很多不同。比如下面的简单的函数：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">h</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'To be brave'</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line">h()</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>可以看到，调用h()之后，print 语句并没有执行！这就是yield，那么，如何让print 语句执行呢？这就是后面要讨论的问题，通过后面的讨论和学习，就会明白yield的工作原理了。<br><a id="more"></a></p>
<ol>
<li>yield是一个表达式<br>Python2.5以前，yield是一个语句，但现在2.5之后，yield是一个表达式(Expression)，比如：<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="keyword">yield </span><span class="number">5</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>表达式(yield 5)的返回值将赋值给m，所以，认为 m = 5 是错误的。那么如何获取(yield 5)的返回值呢？需要用到后面要介绍的send(msg)方法。</p>
<ol>
<li>透过next()语句看原理<br>现在，我们来揭晓yield的工作原理。我们知道，我们上面的h()被调用后并没有执行，因为它有yield表达式，因此，我们通过next()语句让它执行。next()语句将恢复Generator执行，并直到下一个yield表达式处。比如：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">h</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Wen Chuan'</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">5</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Fighting!'</span></span><br><span class="line"></span><br><span class="line">c = h()</span><br><span class="line">c.next()</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>c.next()调用后，h()开始执行，直到遇到yield 5，因此输出结果：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">Wen</span> Chuan</span><br></pre></td></tr></table></figure></p>
<p>当我们再次调用c.next()时，会继续执行，直到找到下一个yield表达式。由于后面没有yield了，因此会拋出异常：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Wen Chuan</span><br><span class="line">Fighting!</span><br><span class="line">Traceback (most recent <span class="operator"><span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/home/evergreen/Codes/yidld.py"</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    <span class="keyword">c</span>.<span class="keyword">next</span>()</span><br><span class="line">StopIteration</span></span><br></pre></td></tr></table></figure></p>
<ol>
<li>send(msg) 与 next()<br>了解了next()如何让包含yield的函数执行后，我们再来看另外一个非常重要的函数send(msg)。其实next()和send()在一定意义上作用是相似的，区别是send()可以传递yield表达式的值进去，而next()不能传递特定的值，只能传递None进去。因此，我们可以看做<br>c.next() 和 c.send(None) 作用是一样的。<br>来看这个例子：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">h</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Wen Chuan'</span>,</span><br><span class="line">    m = <span class="keyword">yield</span> <span class="number">5</span>  <span class="comment"># Fighting!</span></span><br><span class="line">    <span class="keyword">print</span> m</span><br><span class="line">    d = <span class="keyword">yield</span> <span class="number">12</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'We are together!'</span></span><br><span class="line"></span><br><span class="line">c = h()</span><br><span class="line">c.next()  <span class="comment">#相当于c.send(None)</span></span><br><span class="line">c.send(<span class="string">'Fighting!'</span>)  <span class="comment">#(yield 5)表达式被赋予了'Fighting!'</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>输出的结果为：<br><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">Wen</span> <span class="variable">Chuan</span> <span class="variable">Fighting</span><span class="exclamation_mark">!</span></span><br></pre></td></tr></table></figure></p>
<p>需要提醒的是，第一次调用时，请使用next()语句或是send(None)，不能使用send发送一个非None的值，否则会出错的，因为没有yield语句来接收这个值。</p>
<ol>
<li>send(msg) 与 next()的返回值<br><strong>send(msg) 和 next()是有返回值的，它们的返回值很特殊，返回的是下一个yield表达式的参数</strong>。比如yield 5，则返回 5 。到这里，是不是明白了一些什么东西？本文第一个例子中，通过for i in alist 遍历 Generator，其实是每次都调用了alist.Next()，而每次alist.Next()的返回值正是yield的参数，即我们开始认为被压进去的东东。我们再延续上面的例子：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">h</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Wen Chuan'</span>,</span><br><span class="line">    m = <span class="keyword">yield</span> <span class="number">5</span>  <span class="comment"># Fighting!</span></span><br><span class="line">    <span class="keyword">print</span> m</span><br><span class="line">    d = <span class="keyword">yield</span> <span class="number">12</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'We are together!'</span></span><br><span class="line"></span><br><span class="line">c = h()</span><br><span class="line">m = c.next()  <span class="comment">#m 获取了yield 5 的参数值 5</span></span><br><span class="line">d = c.send(<span class="string">'Fighting!'</span>)  <span class="comment">#d 获取了yield 12 的参数值12</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'We will never forget the date'</span>, m, <span class="string">'.'</span>, d</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>输出结果：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Wen Chuan Fighting!</span><br><span class="line">We will never forget the date <span class="number">5</span> . <span class="number">12</span></span><br></pre></td></tr></table></figure></p>
<ol>
<li>throw() 与 close()中断 Generator<br>中断Generator是一个非常灵活的技巧，可以通过throw抛出一个GeneratorExit异常来终止Generator。Close()方法作用是一样的，其实内部它是调用了throw(GeneratorExit)的。我们看：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        self.throw(GeneratorExit)</span><br><span class="line">    <span class="keyword">except</span> (GeneratorExit, StopIteration):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">"generator ignored GeneratorExit"</span>)</span><br><span class="line"><span class="comment"># Other exceptions are not caught</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>因此，当我们调用了close()方法后，再调用next()或是send(msg)的话会抛出一个异常：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent <span class="operator"><span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/home/evergreen/Codes/yidld.py"</span>, line <span class="number">14</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    <span class="keyword">d</span> = <span class="keyword">c</span>.send(<span class="string">'Fighting!'</span>)  #<span class="keyword">d</span> 获取了yield <span class="number">12</span> 的参数值<span class="number">12</span></span><br><span class="line">StopIteration</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>yield的英文单词意思是生产，刚接触Python的时候感到非常困惑，一直没弄明白yield的用法。<br>只知道利用yield产生数据的函数叫<strong>生成器</strong>，用yield接收数据的函数叫<strong>协程</strong>。。。<br>比如下面的例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addlist</span><span class="params">(alist)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> alist:</span><br><span class="line">        <span class="keyword">yield</span> i + <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p>取出alist的每一项，然后把i + 1塞进去。然后通过调用取出每一项：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alist = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="function"><span class="keyword">for</span> x in <span class="title">addlist</span><span class="params">(alist)</span>:</span><br><span class="line">    print x,</span></span><br></pre></td></tr></table></figure></p>
<ol>
<li>包含yield的函数<br>假如你看到某个函数包含了yield，这意味着这个函数已经是一个Generator，它的执行会和其他普通的函数有很多不同。比如下面的简单的函数：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">h</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'To be brave'</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line">h()</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>可以看到，调用h()之后，print 语句并没有执行！这就是yield，那么，如何让print 语句执行呢？这就是后面要讨论的问题，通过后面的讨论和学习，就会明白yield的工作原理了。<br>]]>
    
    </summary>
    
      <category term="python" scheme="http://www.dnwdi.com/tags/python/"/>
    
      <category term="yield" scheme="http://www.dnwdi.com/tags/yield/"/>
    
      <category term="python" scheme="http://www.dnwdi.com/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python之file]]></title>
    <link href="http://www.dnwdi.com/2015/08/19/python-file/"/>
    <id>http://www.dnwdi.com/2015/08/19/python-file/</id>
    <published>2015-08-19T13:05:05.000Z</published>
    <updated>2015-08-19T13:39:27.250Z</updated>
    <content type="html"><![CDATA[<p>一. python打开文件代码如下：</p>
<p>f = open(“d:\test.txt”, “w”)<br>说明：<br>第一个参数是文件名称，包括路径；<br>第二个参数是打开的模式mode</p>
<p>‘r’：只读（缺省。如果文件不存在，则抛出错误）<br>‘w’：只写（如果文件不存在，则自动创建文件）<br>‘a’：附加到文件末尾<br>‘r+’：读写<br>如果需要以二进制方式打开文件，需要在mode后面加上字符”b”，比如”rb””wb”等</p>
<p>二、python读取文件内容f.read(size)</p>
<p>参数size表示读取的数量，可以省略。如果省略size参数，则表示读取文件所有内容。</p>
<p>f.readline()读取文件一行的内容 f.readlines()读取所有的行到数组里面[line1,line2,…lineN]。</p>
<p>在避免将所有文件内容加载到内存中，这种方法常常使用，便于提高效率。</p>
<p>三、python写入文件f.write(string)</p>
<p>将一个字符串写入文件，如果写入结束，必须在字符串后面加上”\n”，然后f.close()关闭文件</p>
<a id="more"></a>
<p>四、文件中的内容定位</p>
<p>f.read()读取之后，文件指针到达文件的末尾，如果再来一次f.read()将会发现读取的是空内容，如果想再次读取全部内容，必须将定位指针移动到文件开始：</p>
<p>f.seek(0)<br>这个函数的格式如下（单位是bytes）：f.seek(offset, from_what) from_what表示开始读取的位置，offset表示从from_what再移动一定量的距离，比如f.seek(10, 3)表示定位到第三个字符并再后移10个字符。</p>
<p>from_what值为0时表示文件的开始，它也可以省略，缺省是0即文件开头。下面给出一个完整的例子：</p>
<p>f = open(‘/tmp/workfile’, ‘r+’)<br>f.write(‘0123456789abcdef’)<br>f.seek(5)     # Go to the 6th byte in the file<br>f.read(1)<br>f.seek (-3, 2) # Go to the 3rd byte before the end<br>f.read(1)<br>五、关闭文件释放资源文件操作完毕，一定要记得关闭文件f.close()，可以释放资源供其他程序使</p>
<p>只是ASCII或者gbk编码格式的的文件读写，比较简单，读写如下：</p>
<p>#coding=gbk</p>
<p>f = open(‘c:/intimate.txt’,’r’) # r 指示文件打开模式，即只读<br>s1 = f.read()<br>s2 = f.readline()<br>s3 = f.readlines() #读出所有内容</p>
<p>f.close()</p>
<p>f = open(‘c:/intimate.txt’,’w’) # w 写文件<br>11 f.write(s1)<br>12 f.writelines(s2) # 没有writeline<br>13 f.close()<br>六. f.writelines不会输出换行符。</p>
<p>python unicode文件读写：</p>
<p>#coding=gbk<br>import codecs</p>
<p>f = codecs.open(‘c:/intimate.txt’,’a’,’utf-8’)<br>f.write(u’中文’)<br>s = ‘中文’<br>f.write(s.decode(‘gbk’))<br>f.close()</p>
<p>f = codecs.open(‘c:/intimate.txt’,’r’,’utf-8’)<br>s = f.readlines()<br>f.close()<br>for line in s:<br>    print line.encode(‘gbk’)<br>python代码文件的编码</p>
<p>py文件默认是ASCII编码，中文在显示时会做一个ASCII到系统默认编码的转换，这时就会出错：SyntaxError: Non-ASCII character。需要在代码文件的第一行或第二行添加编码指示：</p>
<p>#coding=utf-8 ##以utf-8编码储存中文字符<br>print ‘中文’像上面那样直接输入的字符串是按照代码文件的编码来处理的，如果用unicode编码，有以下2种方式：<br>s1 = u’中文’ #u表示用unicode编码方式储存信息<br>s2 = unicode(‘中文’,’gbk’)<br>unicode是一个内置函数，第二个参数指示源字符串的编码格式。</p>
<p>decode是任何字符串具有的方法，将字符串转换成unicode格式，参数指示源字符串的编码格式。</p>
<p>encode也是任何字符串具有的方法，将字符串转换成参数指定的格式。</p>
<p>python字符串的编码</p>
<p>用 u’汉字’ 构造出来的是unicode类型，不用的话构造出来是str类型</p>
<p>str的编码是与系统环境相关的，一般就是sys.getfilesystemencoding()得到的值</p>
<p>所以从unicode转str，要用encode方法</p>
<p>从str转unicode，所以要用decode</p>
<p>例如：</p>
<p> #coding=utf-8   #默认编码格式为utf-8</p>
<p>s = u’中文’ #unicode编码的文字<br>print s.encode(‘utf-8’)   #转换成utf-8格式输出<br>print s #效果与上面相同，似乎默认直接转换为指定编码<br>我的总结：</p>
<p>u=u’unicode编码文字’<br>g=u.encode(‘gbk’) #转换为gbk格式<br>print g #此时为乱码，因为当前环境为utf-8,gbk编码文字为乱码<br>str=g.decode(‘gbk’).encode(‘utf-8’)   #以gbk编码格式读取g（因为他就是gbk编码的）并转换为utf-8格式输出<br>print str #正常显示中文<br>安全的方法：</p>
<p>s.decode(‘gbk’,’ignore’).encode(‘utf-8′) #以gbk编码读取（当然是读取gbk编码格式的文字了）并忽略错误的编码，转换成utf-8编码输出<br>因为decode的函数原型是decode([encoding], [errors=’strict’])，可以用第二个参数控制错误处理的策略，默认的参数就是strict，代表遇到非法字符时抛出异常；</p>
<p>如果设置为ignore，则会忽略非法字符；<br>如果设置为replace，则会用?取代非法字符；<br>如果设置为xmlcharrefreplace，则使用XML的字符引用。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一. python打开文件代码如下：</p>
<p>f = open(“d:\test.txt”, “w”)<br>说明：<br>第一个参数是文件名称，包括路径；<br>第二个参数是打开的模式mode</p>
<p>‘r’：只读（缺省。如果文件不存在，则抛出错误）<br>‘w’：只写（如果文件不存在，则自动创建文件）<br>‘a’：附加到文件末尾<br>‘r+’：读写<br>如果需要以二进制方式打开文件，需要在mode后面加上字符”b”，比如”rb””wb”等</p>
<p>二、python读取文件内容f.read(size)</p>
<p>参数size表示读取的数量，可以省略。如果省略size参数，则表示读取文件所有内容。</p>
<p>f.readline()读取文件一行的内容 f.readlines()读取所有的行到数组里面[line1,line2,…lineN]。</p>
<p>在避免将所有文件内容加载到内存中，这种方法常常使用，便于提高效率。</p>
<p>三、python写入文件f.write(string)</p>
<p>将一个字符串写入文件，如果写入结束，必须在字符串后面加上”\n”，然后f.close()关闭文件</p>]]>
    
    </summary>
    
      <category term="file" scheme="http://www.dnwdi.com/tags/file/"/>
    
      <category term="python" scheme="http://www.dnwdi.com/tags/python/"/>
    
      <category term="python" scheme="http://www.dnwdi.com/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Lesson1]]></title>
    <link href="http://www.dnwdi.com/2015/08/19/life-lesson1/"/>
    <id>http://www.dnwdi.com/2015/08/19/life-lesson1/</id>
    <published>2015-08-19T06:14:21.000Z</published>
    <updated>2015-08-19T06:14:56.468Z</updated>
    <content type="html"><![CDATA[<p><strong>永远不用相信别人的代码</strong>，即使作者本人坚持某个观点。原因：</p>
<ol>
<li><p>作者的观点你理解有误</p>
</li>
<li><p>作者都未意识到潜在的问题</p>
</li>
</ol>
<p>认真思考每行代码，自己的，别人的，And</p>
<pre><code><span class="title">Doubt</span> Everthing
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p><strong>永远不用相信别人的代码</strong>，即使作者本人坚持某个观点。原因：</p>
<ol>
<li><p>作者的观点你理解有误</p>
</li>
<li><p>作者都未意识到潜在的问题</p>
</li>
</ol>
<p>认真思考每行代码，自己的，别人]]>
    </summary>
    
      <category term="life" scheme="http://www.dnwdi.com/tags/life/"/>
    
      <category term="life" scheme="http://www.dnwdi.com/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python特殊语法：filter、map、reduce、lambda]]></title>
    <link href="http://www.dnwdi.com/2015/08/17/python-func/"/>
    <id>http://www.dnwdi.com/2015/08/17/python-func/</id>
    <published>2015-08-17T10:10:07.000Z</published>
    <updated>2015-08-17T10:15:30.460Z</updated>
    <content type="html"><![CDATA[<p>Python内置了一些非常有趣但非常有用的函数，充分体现了Python的语言魅力！</p>
<p><strong>filter(function, sequence)</strong>：对sequence中的item依次执行function(item)，将执行结果为True的item组成一个List/String/Tuple（取决于sequence的类型）返回：</p>
<pre><code><span class="prompt">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span> <span class="keyword">return</span> x % <span class="number">2</span> != <span class="number">0</span> <span class="keyword">and</span> x % <span class="number">3</span> != <span class="number">0</span> 
<span class="prompt">&gt;&gt;&gt; </span>filter(f, range(<span class="number">2</span>, <span class="number">25</span>)) 
[<span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>]
<span class="prompt">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span> <span class="keyword">return</span> x != <span class="string">'a'</span> 
<span class="prompt">&gt;&gt;&gt; </span>filter(f, <span class="string">"abcdef"</span>) 
<span class="string">'bcdef'</span>
</code></pre><p><strong>map(function, sequence)</strong> ：对sequence中的item依次执行function(item)，见执行结果组成一个List返回：</p>
<pre><code><span class="prompt">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">cube</span><span class="params">(x)</span>:</span> <span class="keyword">return</span> x*x*x 
<span class="prompt">&gt;&gt;&gt; </span>map(cube, range(<span class="number">1</span>, <span class="number">11</span>)) 
[<span class="number">1</span>, <span class="number">8</span>, <span class="number">27</span>, <span class="number">64</span>, <span class="number">125</span>, <span class="number">216</span>, <span class="number">343</span>, <span class="number">512</span>, <span class="number">729</span>, <span class="number">1000</span>]
<span class="prompt">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">cube</span><span class="params">(x)</span> :</span> <span class="keyword">return</span> x + x 
<span class="prompt">... </span>
<span class="prompt">&gt;&gt;&gt; </span>map(cube , <span class="string">"abcde"</span>) 
[<span class="string">'aa'</span>, <span class="string">'bb'</span>, <span class="string">'cc'</span>, <span class="string">'dd'</span>, <span class="string">'ee'</span>]
另外map也支持多个sequence，这就要求function也支持相应数量的参数输入：
<span class="prompt">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span> <span class="keyword">return</span> x+y 
<span class="prompt">&gt;&gt;&gt; </span>map(add, range(<span class="number">8</span>), range(<span class="number">8</span>)) 
[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>]
</code></pre><a id="more"></a>
<p><strong>reduce(function, sequence, starting_value)</strong>：对sequence中的item顺序迭代调用function，如果有starting_value，还可以作为初始值调用，例如可以用来对List求和：</p>
<pre><code><span class="prompt">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span> <span class="keyword">return</span> x + y 
<span class="prompt">&gt;&gt;&gt; </span>reduce(add, range(<span class="number">1</span>, <span class="number">11</span>)) 
<span class="number">55</span> （注：<span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span>+<span class="number">4</span>+<span class="number">5</span>+<span class="number">6</span>+<span class="number">7</span>+<span class="number">8</span>+<span class="number">9</span>+<span class="number">10</span>）
<span class="prompt">&gt;&gt;&gt; </span>reduce(add, range(<span class="number">1</span>, <span class="number">11</span>), <span class="number">20</span>) 
<span class="number">75</span> （注：<span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span>+<span class="number">4</span>+<span class="number">5</span>+<span class="number">6</span>+<span class="number">7</span>+<span class="number">8</span>+<span class="number">9</span>+<span class="number">10</span>+<span class="number">20</span>）
</code></pre><p><strong>lambda</strong>：这是Python支持一种有趣的语法，它允许你快速定义单行的最小函数，类似与C语言中的宏，这些叫做lambda的函数，是从LISP借用来的，可以用在任何需要函数的地方： </p>
<pre><code>&gt;&gt;&gt; g = lambda x: x * <span class="number">2</span> 
&gt;&gt;&gt; g(<span class="number">3</span>) 
<span class="number">6</span> 
&gt;&gt;&gt; (lambda x: x * <span class="number">2</span>)(<span class="number">3</span>) 
<span class="number">6</span>
</code></pre><p>我们也可以把filter map reduce 和lambda结合起来用，函数就可以简单的写成一行。<br>例如</p>
<pre><code>kmpathes = filter<span class="list">(<span class="keyword">lambda</span> kmpath: kmpath,                  
map<span class="list">(<span class="keyword">lambda</span> kmpath: string.strip<span class="list">(<span class="keyword">kmpath</span>)</span>,
string.split<span class="list">(<span class="keyword">l</span>, ':')</span>)</span>)</span> 
</code></pre><p>看起来麻烦，其实就像用语言来描述问题一样，非常优雅。<br>对 l 中的所有元素以’:’做分割，得出一个列表。对这个列表的每一个元素做字符串strip，形成一个列表。对这个列表的每一个元素做直接返回操作(这个地方可以加上过滤条件限制)，最终获得一个字符串被’:’分割的列表，列表中的每一个字符串都做了strip，并可以对特殊字符串过滤。</p>
<hr>
<p>lambda表达式返回一个函数对象<br>例子：</p>
<pre><code><span class="function"><span class="keyword">func</span> = <span class="title">lambda</span> <span class="title">x</span>,<span class="title">y</span>:<span class="title">x</span>+<span class="title">y</span></span>
</code></pre><p>func相当于下面这个函数</p>
<pre><code><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x,y)</span>:</span>
    <span class="keyword">return</span> x+y
</code></pre><p>注意def是语句而lambda是表达式<br>下面这种情况下就只能用lambda而不能用def</p>
<pre><code><span class="list">[<span class="list">(<span class="keyword"><span class="built_in">lambda</span></span> x:x*x)</span><span class="list">(<span class="keyword">x</span>)</span> for x in range<span class="list">(<span class="keyword">1</span>,<span class="number">11</span>)</span>]</span>
</code></pre><p><strong>map，reduce，filter中的function都可以用lambda表达式来生成！</strong></p>
<p>map(function,sequence)<br>把sequence中的值当参数逐个传给function，返回一个包含函数执行结果的list。<br>如果function有两个参数，即map(function,sequence1,sequence2)。</p>
<p>例子：<br>求1<em>1,2</em>2,3<em>3,4</em>4</p>
<pre><code>map<span class="list">(<span class="keyword">lambda</span> x<span class="keyword">:x*x</span>,range<span class="list">(<span class="number">1</span>,<span class="number">5</span>)</span>)</span>
</code></pre><p>返回值是[1,4,9,16]</p>
<p>reduce(function,sequence)<br>function接收的参数个数只能为2<br>先把sequence中第一个值和第二个值当参数传给function，再把function的返回值和第三个值当参数传给<br>function，然后只返回一个结果。</p>
<p>例子：<br>求1到10的累加</p>
<pre><code>reduce<span class="list">(<span class="keyword">lambda</span> x,y<span class="keyword">:x+y</span>,range<span class="list">(<span class="number">1</span>,<span class="number">11</span>)</span>)</span>
</code></pre><p>返回值是55。</p>
<p>filter(function,sequence)<br>function的返回值只能是True或False<br>把sequence中的值逐个当参数传给function，如果function(x)的返回值是True，就把x加到filter的返回值里面。一般来说filter的返回值是list，特殊情况如sequence是string或tuple，则返回值按照sequence的类型。</p>
<p>例子：<br>找出1到10之间的奇数</p>
<pre><code>filter(lambda x:x%<span class="number">2</span>!=<span class="number">0</span>,range(<span class="number">1</span>,<span class="number">11</span>))
</code></pre><p>返回值<br>[1,3,5,7,9]</p>
<p>如果sequence是一个string<br>filter(lambda x:len(x)!=0,’hello’)返回’hello’<br>filter(lambda x:len(x)==0,’hello’)返回’’</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Python内置了一些非常有趣但非常有用的函数，充分体现了Python的语言魅力！</p>
<p><strong>filter(function, sequence)</strong>：对sequence中的item依次执行function(item)，将执行结果为True的item组成一个List/String/Tuple（取决于sequence的类型）返回：</p>
<pre><code><span class="prompt">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span> <span class="keyword">return</span> x % <span class="number">2</span> != <span class="number">0</span> <span class="keyword">and</span> x % <span class="number">3</span> != <span class="number">0</span> 
<span class="prompt">&gt;&gt;&gt; </span>filter(f, range(<span class="number">2</span>, <span class="number">25</span>)) 
[<span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>]
<span class="prompt">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span> <span class="keyword">return</span> x != <span class="string">'a'</span> 
<span class="prompt">&gt;&gt;&gt; </span>filter(f, <span class="string">"abcdef"</span>) 
<span class="string">'bcdef'</span>
</code></pre><p><strong>map(function, sequence)</strong> ：对sequence中的item依次执行function(item)，见执行结果组成一个List返回：</p>
<pre><code><span class="prompt">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">cube</span><span class="params">(x)</span>:</span> <span class="keyword">return</span> x*x*x 
<span class="prompt">&gt;&gt;&gt; </span>map(cube, range(<span class="number">1</span>, <span class="number">11</span>)) 
[<span class="number">1</span>, <span class="number">8</span>, <span class="number">27</span>, <span class="number">64</span>, <span class="number">125</span>, <span class="number">216</span>, <span class="number">343</span>, <span class="number">512</span>, <span class="number">729</span>, <span class="number">1000</span>]
<span class="prompt">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">cube</span><span class="params">(x)</span> :</span> <span class="keyword">return</span> x + x 
<span class="prompt">... </span>
<span class="prompt">&gt;&gt;&gt; </span>map(cube , <span class="string">"abcde"</span>) 
[<span class="string">'aa'</span>, <span class="string">'bb'</span>, <span class="string">'cc'</span>, <span class="string">'dd'</span>, <span class="string">'ee'</span>]
另外map也支持多个sequence，这就要求function也支持相应数量的参数输入：
<span class="prompt">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span> <span class="keyword">return</span> x+y 
<span class="prompt">&gt;&gt;&gt; </span>map(add, range(<span class="number">8</span>), range(<span class="number">8</span>)) 
[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>]
</code></pre>]]>
    
    </summary>
    
      <category term="lambda" scheme="http://www.dnwdi.com/tags/lambda/"/>
    
      <category term="python" scheme="http://www.dnwdi.com/tags/python/"/>
    
      <category term="python" scheme="http://www.dnwdi.com/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git之分支操作]]></title>
    <link href="http://www.dnwdi.com/2015/08/17/git-branch/"/>
    <id>http://www.dnwdi.com/2015/08/17/git-branch/</id>
    <published>2015-08-17T09:03:10.000Z</published>
    <updated>2015-08-17T09:04:06.116Z</updated>
    <content type="html"><![CDATA[<p>在项目中有时候会遇到git关于分支的一些操作，现总结如下：</p>
<p><strong>查看分支：</strong><br>1 查看本地分支：</p>
<pre><code><span class="variable">$ </span>git branch
</code></pre><p>2 查看远程分支</p>
<pre><code>$ git <span class="keyword">branch </span>-r
</code></pre><p><strong>创建分支：</strong><br>1 创建本地分支（建立分支后，仍停留在当前分支，切换分支：git checkout branchName）</p>
<pre><code>$ git <span class="keyword">branch </span><span class="keyword">branchName</span>
</code></pre><p>2 创建分支后切换到新分支</p>
<pre><code>$ git checkout -<span class="tag">b</span> branchName
</code></pre><p><strong>提交分支：</strong><br>1 提交到远程分支</p>
<pre><code>$ git commit -a -m <span class="symbol">'my</span> <span class="keyword">new</span> branch'
</code></pre><p>git push origin branchName:branchName<br>2 如果想把本地的某个分支mybranch提交到远程仓库，并作为远程仓库的master分支</p>
<pre><code>$ git <span class="keyword">push </span>origin mybranch:master
</code></pre><a id="more"></a>    
<p><strong>删除分支：</strong><br>1 删除远程分支</p>
<pre><code><span class="variable">$ </span>git push origin <span class="symbol">:branchName</span>
</code></pre><p>2 删除本地分支，强制删除用-D</p>
<pre><code>$ git <span class="keyword">branch </span>-d <span class="keyword">branchName</span>
</code></pre><p><strong>合并分支：</strong><br>将分支branchName和当前所在分支合并</p>
<pre><code><span class="variable">$ </span>git merge branchName
</code></pre><p><strong>标记tag：</strong><br>对当前分支打tag：</p>
<pre><code>git <span class="keyword">tag</span> <span class="keyword">tag</span>Content
</code></pre><p>然后push到远程即可：</p>
<pre><code><span class="label">git</span> <span class="keyword">push </span>origin <span class="keyword">BranchName:BranchName</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>在项目中有时候会遇到git关于分支的一些操作，现总结如下：</p>
<p><strong>查看分支：</strong><br>1 查看本地分支：</p>
<pre><code><span class="variable">$ </span>git branch
</code></pre><p>2 查看远程分支</p>
<pre><code>$ git <span class="keyword">branch </span>-r
</code></pre><p><strong>创建分支：</strong><br>1 创建本地分支（建立分支后，仍停留在当前分支，切换分支：git checkout branchName）</p>
<pre><code>$ git <span class="keyword">branch </span><span class="keyword">branchName</span>
</code></pre><p>2 创建分支后切换到新分支</p>
<pre><code>$ git checkout -<span class="tag">b</span> branchName
</code></pre><p><strong>提交分支：</strong><br>1 提交到远程分支</p>
<pre><code>$ git commit -a -m <span class="symbol">'my</span> <span class="keyword">new</span> branch'
</code></pre><p>git push origin branchName:branchName<br>2 如果想把本地的某个分支mybranch提交到远程仓库，并作为远程仓库的master分支</p>
<pre><code>$ git <span class="keyword">push </span>origin mybranch:master
</code></pre>]]>
    
    </summary>
    
      <category term="branch" scheme="http://www.dnwdi.com/tags/branch/"/>
    
      <category term="git" scheme="http://www.dnwdi.com/tags/git/"/>
    
      <category term="git" scheme="http://www.dnwdi.com/categories/git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[sql之left join、right join、inner join的区别]]></title>
    <link href="http://www.dnwdi.com/2015/08/17/sql-join/"/>
    <id>http://www.dnwdi.com/2015/08/17/sql-join/</id>
    <published>2015-08-17T08:52:16.000Z</published>
    <updated>2015-08-17T08:54:42.757Z</updated>
    <content type="html"><![CDATA[<p><strong>left join(左联接) 返回包括左表中的所有记录和右表中联结字段相等的记录</strong> </p>
<p><strong>right join(右联接) 返回包括右表中的所有记录和左表中联结字段相等的记录</strong></p>
<p><strong>inner join(等值连接) 只返回两个表中联结字段相等的行</strong></p>
<p>举例如下： </p>
<p>表A记录如下：<br>aID　　　　　aNum<br>1　　　　　a20050111<br>2　　　　　a20050112<br>3　　　　　a20050113<br>4　　　　　a20050114<br>5　　　　　a20050115</p>
<p>表B记录如下:<br>bID　　　　　bName<br>1　　　　　2006032401<br>2　　　　　2006032402<br>3　　　　　2006032403<br>4　　　　　2006032404<br>8　　　　　2006032408</p>
<p>1.left join<br>sql语句如下: </p>
<pre><code><span class="keyword">select</span> * <span class="keyword">from</span> A
left <span class="keyword">join</span> B 
<span class="keyword">on</span> A.aID = B.bID
</code></pre><a id="more"></a>    
<p>结果如下:<br>aID　　　　　aNum　　　　　bID　　　　　bName<br>1　　　　　a20050111　　　　1　　　　　2006032401<br>2　　　　　a20050112　　　　2　　　　　2006032402<br>3　　　　　a20050113　　　　3　　　　　2006032403<br>4　　　　　a20050114　　　　4　　　　　2006032404<br>5　　　　　a20050115　　　　NULL　　　　　NULL</p>
<p>（所影响的行数为 5 行）<br>结果说明:<br>left join是以A表的记录为基础的,A可以看成左表,B可以看成右表,left join是以左表为准的.<br>换句话说,左表(A)的记录将会全部表示出来,而右表(B)只会显示符合搜索条件的记录(例子中为: A.aID = B.bID).<br>B表记录不足的地方均为NULL.</p>
<p>2.right join<br>sql语句如下: </p>
<pre><code>select * <span class="built_in">from</span> A
<span class="constant">right</span> join B 
<span class="command"><span class="keyword">on</span> <span class="title">A</span>.<span class="title">aID</span> = <span class="title">B</span>.<span class="title">bID</span></span>
</code></pre><p>结果如下:<br>aID　　　　　aNum　　　　　bID　　　　　bName<br>1　　　　　a20050111　　　　1　　　　　2006032401<br>2　　　　　a20050112　　　　2　　　　　2006032402<br>3　　　　　a20050113　　　　3　　　　　2006032403<br>4　　　　　a20050114　　　　4　　　　　2006032404<br>NULL　　　　　NULL　　　　　8　　　　　2006032408</p>
<p>（所影响的行数为 5 行）<br>结果说明:<br>仔细观察一下,就会发现,和left join的结果刚好相反,这次是以右表(B)为基础的,A表不足的地方用NULL填充.</p>
<p>3.inner join<br>sql语句如下: </p>
<pre><code>select * <span class="keyword">from</span> A
innerjoin B 
<span class="function_start"><span class="keyword">on</span></span> A.aID = B.bID
</code></pre><p>结果如下:<br>aID　　　　　aNum　　　　　bID　　　　　bName<br>1　　　　　a20050111　　　　1　　　　　2006032401<br>2　　　　　a20050112　　　　2　　　　　2006032402<br>3　　　　　a20050113　　　　3　　　　　2006032403<br>4　　　　　a20050114　　　　4　　　　　2006032404</p>
<p>结果说明:<br>很明显,这里只显示出了 A.aID = B.bID的记录.这说明inner join并不以谁为基础,它只显示符合条件的记录.</p>
<p>注:<br>LEFT JOIN操作用于在任何的 FROM 子句中，组合来源表的记录。使用 LEFT JOIN 运算来创建一个左边外部联接。左边外部联接将包含了从第一个（左边）开始的两个表中的全部记录，即使在第二个（右边）表中并没有相符值的记录。</p>
<p>语法：FROM table1 LEFT JOIN table2 ON table1.field1 compopr table2.field2</p>
<p>说明：table1, table2参数用于指定要将记录组合的表的名称。<br>field1, field2参数指定被联接的字段的名称。且这些字段必须有相同的数据类型及包含相同类型的数据，但它们不需要有相同的名称。<br>compopr参数指定关系比较运算符：”=”， “&lt;”， “&gt;”， “&lt;=”， “&gt;=” 或 “&lt;&gt;”。<br>如果在INNER JOIN操作中要联接包含Memo 数据类型或 OLE Object 数据类型数据的字段，将会发生错误. </p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>left join(左联接) 返回包括左表中的所有记录和右表中联结字段相等的记录</strong> </p>
<p><strong>right join(右联接) 返回包括右表中的所有记录和左表中联结字段相等的记录</strong></p>
<p><strong>inner join(等值连接) 只返回两个表中联结字段相等的行</strong></p>
<p>举例如下： </p>
<p>表A记录如下：<br>aID　　　　　aNum<br>1　　　　　a20050111<br>2　　　　　a20050112<br>3　　　　　a20050113<br>4　　　　　a20050114<br>5　　　　　a20050115</p>
<p>表B记录如下:<br>bID　　　　　bName<br>1　　　　　2006032401<br>2　　　　　2006032402<br>3　　　　　2006032403<br>4　　　　　2006032404<br>8　　　　　2006032408</p>
<p>1.left join<br>sql语句如下: </p>
<pre><code><span class="keyword">select</span> * <span class="keyword">from</span> A
left <span class="keyword">join</span> B 
<span class="keyword">on</span> A.aID = B.bID
</code></pre>]]>
    
    </summary>
    
      <category term="mysql" scheme="http://www.dnwdi.com/tags/mysql/"/>
    
      <category term="mysql" scheme="http://www.dnwdi.com/categories/mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MySQL索引创建 删除 增加 修改命令]]></title>
    <link href="http://www.dnwdi.com/2015/08/11/mysql-index/"/>
    <id>http://www.dnwdi.com/2015/08/11/mysql-index/</id>
    <published>2015-08-11T10:37:36.000Z</published>
    <updated>2015-08-17T08:55:47.982Z</updated>
    <content type="html"><![CDATA[<p>在mysql中索引是我们对数据库进行优化的一个很好的功能，下面我来给大家介绍mysql 索引的创建 删除 增加 修改方法，希望些教程对各位朋友有所帮助。</p>
<p><strong>CREATE命令创建唯一索引：</strong><br>可以创建一个唯一索引的表。唯一的索引意味着两个行不能拥有相同的索引值。这里是语法来创建索引的表</p>
<pre><code><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> index_name
<span class="keyword">ON</span> table_name ( column1, column2,...);</span>
</code></pre><p>可以使用一个或多个列上创建索引。例如，我们可以创建一个索引的使用在表tutorials_tbl的tutorial_author列上</p>
<pre><code><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> AUTHOR_INDEX
<span class="keyword">ON</span> tutorials_tbl (tutorial_author)</span>
</code></pre><p><strong>CREATE命令创建简单索引</strong><br>可以创建一个简单的索引的表。只要省略UNIQUE关键字的查询创建一个简单的索引。简单的索引允许重复表中的值。<br>如果你想在一列以降序索引值，可以在列名后添加保留字DESC：</p>
<pre><code>mysql&gt; <span class="keyword">CREATE</span> <span class="keyword">INDEX</span> AUTHOR_INDEX
<span class="keyword">ON</span> tutorials_tbl (tutorial_author <span class="keyword">DESC</span>)
</code></pre><a id="more"></a>
<p><strong>ALTER命令添加和删除索引：</strong><br>有四种类型的语句表添加索引：</p>
<pre><code><span class="operator"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">ADD</span> PRIMARY <span class="keyword">KEY</span> (column_list)</span>
</code></pre><p>这条语句添加一个主键，这意味着索引值必须是唯一的，不能是NULL。</p>
<pre><code><span class="operator"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> index_name (column_list)</span>
</code></pre><p>这条语句创建一个索引，其值必须是唯一的（除NULL值，这可能会多次出现）。</p>
<pre><code><span class="operator"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">ADD</span> <span class="keyword">INDEX</span> index_name (column_list)</span>
</code></pre><p>这增加了一个普通的索引，其中的任何值，可能会出现多于一次。</p>
<pre><code><span class="operator"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">ADD</span> FULLTEXT index_name (column_list)</span>
</code></pre><p>这将创建一个特殊的FULLTEXT索引，用于文本搜索的目的。</p>
<p>下面是这个例子，在现有的表添加索引。</p>
<pre><code>mysql&gt; ALTER TABLE testalter_tbl ADD INDEX <span class="list">(<span class="keyword">c</span>)</span><span class="comment">;</span>
</code></pre><p>可以删除任何INDEX通过使用DROP子句和使用ALTER命令。试试下面的例子上面创建的索引下降。</p>
<pre><code>mysql&gt; ALTER TABLE testalter_tbl DROP INDEX <span class="list">(<span class="keyword">c</span>)</span><span class="comment">;</span>
</code></pre><p>可以使用ALTER命令删除主键如下：</p>
<pre><code>mysql&gt; ALTER TABLE testalter_tbl DROP PRIMARY <span class="keyword">KEY</span><span class="comment">;</span>
</code></pre><p>显示索引信息：<br>您可以使用SHOW INDEX命令，列出所有相关联的索引表。垂直格式输出（指定由 G）往往是有用的这句话，以避免长时间行重叠：</p>
<pre><code>mysql&gt; SHOW <span class="keyword">INDEX</span> <span class="keyword">FROM</span> table_nameG
</code></pre><p><strong>ALTER命令加索引</strong><br>mysql&gt; alter table 表名 add index 索引名 (字段名1[，字段名2 …]);</p>
<pre><code>mysql&gt; alter table employee add <span class="built_in">index</span> emp_name (<span class="keyword">name</span>);
</code></pre><p>加主关键字的索引<br>mysql&gt; alter table 表名 add primary key (字段名);</p>
<pre><code>mysql&gt; alter table employee add primary key<span class="list">(<span class="keyword">id</span>)</span><span class="comment">;</span>
</code></pre><p>加唯一限制条件的索引<br>mysql&gt; alter table 表名 add unique 索引名 (字段名);</p>
<pre><code>mysql&gt; alter table employee add unique emp_name2<span class="list">(<span class="keyword">cardnumber</span>)</span><span class="comment">;</span>
</code></pre><p>查看某个表的索引<br>mysql&gt; show index from 表名;</p>
<pre><code>mysql&gt; show <span class="keyword">index</span> <span class="keyword">from</span> employee;
</code></pre><p>删除某个索引<br>mysql&gt; alter table 表名 drop index 索引名;</p>
<pre><code>mysql&gt;alter <span class="keyword">table</span> employee <span class="keyword">drop</span> index emp_name;
</code></pre><p>总结索引与优化<br>1、选择索引的数据类型<br>MySQL支持很多数据类型，选择合适的数据类型存储数据对性能有很大的影响。通常来说，可以遵循以下一些指导原则：<br>(1)越小的数据类型通常更好：越小的数据类型通常在磁盘、内存和CPU缓存中都需要更少的空间，处理起来更快。<br>(2)简单的数据类型更好：整型数据比起字符，处理开销更小，因为字符串的比较更复杂。在MySQL中，应该用内置的日期和时间数据类型，而不是用字符串来存储时间；以及用整型数据类型存储IP地址。<br>(3)尽量避免NULL：应该指定列为NOT NULL，除非你想存储NULL。在MySQL中，含有空值的列很难进行查询优化，因为它们使得索引、索引的统计信息以及比较运算更加复杂。你应该用0、一个特殊的值或者一个空串代替空值。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在mysql中索引是我们对数据库进行优化的一个很好的功能，下面我来给大家介绍mysql 索引的创建 删除 增加 修改方法，希望些教程对各位朋友有所帮助。</p>
<p><strong>CREATE命令创建唯一索引：</strong><br>可以创建一个唯一索引的表。唯一的索引意味着两个行不能拥有相同的索引值。这里是语法来创建索引的表</p>
<pre><code><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> index_name
<span class="keyword">ON</span> table_name ( column1, column2,...);</span>
</code></pre><p>可以使用一个或多个列上创建索引。例如，我们可以创建一个索引的使用在表tutorials_tbl的tutorial_author列上</p>
<pre><code><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> AUTHOR_INDEX
<span class="keyword">ON</span> tutorials_tbl (tutorial_author)</span>
</code></pre><p><strong>CREATE命令创建简单索引</strong><br>可以创建一个简单的索引的表。只要省略UNIQUE关键字的查询创建一个简单的索引。简单的索引允许重复表中的值。<br>如果你想在一列以降序索引值，可以在列名后添加保留字DESC：</p>
<pre><code>mysql&gt; <span class="keyword">CREATE</span> <span class="keyword">INDEX</span> AUTHOR_INDEX
<span class="keyword">ON</span> tutorials_tbl (tutorial_author <span class="keyword">DESC</span>)
</code></pre>]]>
    
    </summary>
    
      <category term="index" scheme="http://www.dnwdi.com/tags/index/"/>
    
      <category term="mysql" scheme="http://www.dnwdi.com/tags/mysql/"/>
    
      <category term="mysql" scheme="http://www.dnwdi.com/categories/mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[批量删除Redis的key]]></title>
    <link href="http://www.dnwdi.com/2015/08/11/redis-batch-del/"/>
    <id>http://www.dnwdi.com/2015/08/11/redis-batch-del/</id>
    <published>2015-08-11T06:06:05.000Z</published>
    <updated>2015-08-11T06:07:09.720Z</updated>
    <content type="html"><![CDATA[<pre><code>redis-<span class="keyword">cli</span> KEYS <span class="string">"yourkeys_*"</span> | xargs redis-<span class="keyword">cli</span> DEL
</code></pre><hr>
<p>Redis并没有提供批量删除记录的方法，这有时候很不方便，特别是重新初始化数据的时候。一般有两种做法：<br>如果业务场景明确，可以通过DBID进行区分，Redis默认的DBID是0，默认的配置文件是有16个DB，可以在应用中通过select方法指定数据库的ID进行存取。然后通过FlushDB命令能清空某个ID的数据库，达到重新初始化的目的。<br>如果某个ID的数据库已经有很多类型的记录了，无法整个库清空，那么就需要批量的删除key值，这时<strong>可以采用Linux管道</strong>，比如我要删除DBID为1的test开头的key值：</p>
<pre><code>[root@banping redis]# /banping/redis/src/redis-<span class="keyword">cli</span> -<span class="keyword">n</span> 1 keys “<span class="keyword">test</span>*” | xargs /banping/redis/src/redis-<span class="keyword">cli</span> -<span class="keyword">n</span> 1 del
(integer) 5095
</code></pre><p>把keys的输出作为del的输入，这样就批量删除了。<br>附redis-cli 命令：<br>redis-cli 2.4.2</p>
<pre><code>Usage: redis-cli [OPTIONS] [cmd [arg [arg ...]]]
-h Server hostname (default: 127.0.<span class="operator">0.<span class="number">1</span>)
-<span class="keyword">p</span> <span class="keyword">Server</span> port (<span class="keyword">default</span>: <span class="number">6379</span>)
-s <span class="keyword">Server</span> socket (overrides hostname <span class="keyword">and</span> port)
-a <span class="keyword">Password</span> <span class="keyword">to</span> <span class="keyword">use</span> <span class="keyword">when</span> connecting <span class="keyword">to</span> the <span class="keyword">server</span>
-r <span class="keyword">Execute</span> specified command <span class="keyword">N</span> times
-<span class="keyword">i</span> <span class="keyword">When</span> -r <span class="keyword">is</span> used, waits seconds per command.
It <span class="keyword">is</span> possible <span class="keyword">to</span> specify sub-<span class="keyword">second</span> times <span class="keyword">like</span> -<span class="keyword">i</span> <span class="number">0.1</span>.
-<span class="keyword">n</span> <span class="keyword">Database</span> <span class="built_in">number</span>
-x <span class="keyword">Read</span> <span class="keyword">last</span> argument <span class="keyword">from</span> STDIN
-<span class="keyword">d</span> Multi-<span class="keyword">bulk</span> delimiter <span class="keyword">in</span> <span class="keyword">for</span> <span class="keyword">raw</span> formatting (<span class="keyword">default</span>: \<span class="keyword">n</span>)
–<span class="keyword">raw</span> <span class="keyword">Use</span> <span class="keyword">raw</span> formatting <span class="keyword">for</span> replies (<span class="keyword">default</span> <span class="keyword">when</span> STDOUT <span class="keyword">is</span> <span class="keyword">not</span> a tty)
–latency Enter a special <span class="keyword">mode</span> continuously sampling latency.
–<span class="keyword">help</span> <span class="keyword">Output</span> this <span class="keyword">help</span> <span class="keyword">and</span> <span class="keyword">exit</span>
–<span class="keyword">version</span> <span class="keyword">Output</span> <span class="keyword">version</span> <span class="keyword">and</span> <span class="keyword">exit</span></span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<pre><code>redis-<span class="keyword">cli</span> KEYS <span class="string">"yourkeys_*"</span> | xargs redis-<span class="keyword">cli</spa]]>
    </summary>
    
      <category term="redis" scheme="http://www.dnwdi.com/tags/redis/"/>
    
      <category term="redis" scheme="http://www.dnwdi.com/categories/redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[redis_error:Operation against a key holding the wrong kind of value]]></title>
    <link href="http://www.dnwdi.com/2015/08/11/redis-error/"/>
    <id>http://www.dnwdi.com/2015/08/11/redis-error/</id>
    <published>2015-08-11T03:48:22.000Z</published>
    <updated>2015-08-11T06:08:33.858Z</updated>
    <content type="html"><![CDATA[<p>首先应该明白报这个错误说明了你用的<strong>jedis方法与redis服务器中存储数据的类型存在冲突</strong>。</p>
<p>例如：数据库中有一个key是usrInfo的数据存储的是Hash类型的，但是你使用jedis执行数据</p>
<p>操作的时候却使用了非Hash的操作方法，比如Sorted Sets里的方法。此时就会报</p>
<p><code>ERR Operation against a key holding the wrong kind of value</code></p>
<p>问题解决：</p>
<p>先执行一条如下命令，usrInfo为其中的一个key值。</p>
<pre><code>redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;type usrInfo
</code></pre><p>此时会显示出该key存储在现在redis服务器中的类型，例如：</p>
<pre><code>redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;hash
</code></pre><p>则表示key为usrInfo的数据是以hash类型存储在redis服务器里的，此时操作这个数据就必须使用hset、hget等操作方法。</p>
<p>如果是zset如下：</p>
<pre><code>redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;zset
</code></pre><p>则表示数据类型为Sorted Sets的。此时就需要使用zadd、zrange等操作方法，否则就会报ERR Operation against a key holding the wrong kind of value这个错误！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>首先应该明白报这个错误说明了你用的<strong>jedis方法与redis服务器中存储数据的类型存在冲突</strong>。</p>
<p>例如：数据库中有一个key是usrInfo的数据存储的是Hash类型的，但是你使用jedis执行数据</p>
<p>操作的时候却使用]]>
    </summary>
    
      <category term="redis" scheme="http://www.dnwdi.com/tags/redis/"/>
    
      <category term="redis" scheme="http://www.dnwdi.com/categories/redis/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Windows下搭建Github Blog]]></title>
    <link href="http://www.dnwdi.com/2015/08/07/blog-with-hexo/"/>
    <id>http://www.dnwdi.com/2015/08/07/blog-with-hexo/</id>
    <published>2015-08-07T06:15:41.000Z</published>
    <updated>2015-08-17T15:26:29.701Z</updated>
    <content type="html"><![CDATA[<p>第一次在github上搭建自己的博客，花了将近一天的时间，终于能出了一个像样的页面，现在将我搭建的过程记录一下，省的再走弯路。</p>
<p>一开始在网上搜教程，有好多讲用jekyll的，也让我记住了阮一峰这个人！这个是他写的教程：<a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html" target="_blank" rel="external">搭建一个免费的，无限流量的Blog—-github Pages和Jekyll入门</a> 。在跑他这个例子的时候，我就花了好多时间==！主要的坑如下：</p>
<ol>
<li><p>使用UTF-8无BOM格式编码。由于我用的notepad++编辑器，默认编码是ANSI，所以会出现乱码情况</p>
</li>
<li><p>注意gh_pages分支和master分支的区别。在user pages如repo是dnwdi.github.io下的博客用master分支；<br>在project pages如repo是dnwdi.github.io/blog下的博客用gh_pages分支 </p>
</li>
</ol>
<p>最要命的一点是，当配置文件或者Liquid模板语言不小心写错了，git push上去之后，git会发一封build failed的邮件，但完全没有说明具体的出错地方，所以查错非常困难！这点无法容忍，所以最后虽然页面出来了，但不是想要的结果，有些liquid语言没有正确解析，也懒得调试了，直接放弃了</p>
<p>之后看到用Hexo搭建的教程，创建简单，可以本地调试，可以看到具体的出错地方，这点我觉得是最大的优点，有问题不要紧，至少要知道在哪改嘛！</p>
<p>参照的博客如下，写的都非常详尽！</p>
<ul>
<li><a href="http://www.isetsuna.com/categories/Hexo/" target="_blank" rel="external">Hexo博客系列</a></li>
<li><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external">hexo你的博客</a></li>
<li><a href="http://segmentfault.com/a/1190000002592993" target="_blank" rel="external">Hexo 3.0 静态博客使用指南</a></li>
<li><a href="http://baoxiehao.com/2014/05/17/Hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/" target="_blank" rel="external">Hexo博客优化</a></li>
</ul>
<p>由于hexo页面使用markdown语法，故附上我使用的markdown编辑器：</p>
<p><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">Cmd Markdown编辑器</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>第一次在github上搭建自己的博客，花了将近一天的时间，终于能出了一个像样的页面，现在将我搭建的过程记录一下，省的再走弯路。</p>
<p>一开始在网上搜教程，有好多讲用jekyll的，也让我记住了阮一峰这个人！这个是他写的教程：<a href="http://www.r]]>
    </summary>
    
      <category term="hexo" scheme="http://www.dnwdi.com/tags/hexo/"/>
    
      <category term="hexo" scheme="http://www.dnwdi.com/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[这是一篇测试文章]]></title>
    <link href="http://www.dnwdi.com/2015/08/06/test/"/>
    <id>http://www.dnwdi.com/2015/08/06/test/</id>
    <published>2015-08-06T03:53:15.000Z</published>
    <updated>2015-08-06T03:59:05.702Z</updated>
    <content type="html"><![CDATA[<h1 id="我的博客正式开通啦！">我的博客正式开通啦！</h1><p><img src="http://7xkx7i.com1.z0.glb.clouddn.com/222211817.jpg" alt="此处输入图片的描述"></p>
<pre><code>public <span class="value">static</span> void <span class="function">main</span>(String<span class="attr_selector">[]</span> args){
    <span class="function">while</span>(<span class="function">isAlive</span>()){
        <span class="function">doStudy</span>();
    }
}
</code></pre><p><a href="http://dnwdi.github.io" target="_blank" rel="external">我的博客地址</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="我的博客正式开通啦！">我的博客正式开通啦！</h1><p><img src="http://7xkx7i.com1.z0.glb.clouddn.com/222211817.jpg" alt="此处输入图片的描述"></p>
<pre><code>public ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://www.dnwdi.com/2015/08/06/hello-world/"/>
    <id>http://www.dnwdi.com/2015/08/06/hello-world/</id>
    <published>2015-08-06T02:15:40.241Z</published>
    <updated>2015-08-06T02:15:40.241Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>